#!/bin/bash

dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

# declare an array to store arguments in
declare -a args

device="brother4:bus8;dev1"
output=scan.pdf
USEARRAY=0
APPEND=0
RESOLUTION=300
MODE=Lineart
SCRIPT="$dir/scan_perpage"
duplex=0
UNPAPER=0
SEARCHABLE=0
LANGUAGE=eng
MAXPAGE=
TRUNCPAGE=0
HELP=0
size=A4
PGHEIGHT=
pgheightin=
PGWIDTH=
pgwidthin=
crop=0
DESKEW=0
VERBOSE=0
SKIP_EMPTY_PAGES=0


i=0 tmp_dir=
trap '[[ $tmp_dir ]] && rm -rf "$tmp_dir"' EXIT

while ((++i <= 10)); do
  tmp_dir=${TMPdir:-$HOME}/$RANDOM-$$
  mkdir -m 700 "$tmp_dir" 2>/dev/null && break
done

if ((i > 10)); then
  printf 'Could not create temporary directory\n' >&2
  exit 1
fi


# Parse command-line options
while [ $# -gt 0 ]; do
  case "$1" in

  -v|--verbose) VERBOSE=1 ;;

  -d|--duplex) duplex=1 ;;

  -m|--mode) shift; MODE=$1 ;;

  -r|--resolution) shift; RESOLUTION=$1 ;;

  -a|--append) APPEND=1 ;;

  -e|--max) shift; MAXPAGE=$1 ;;

  -t|--truncate) shift; TRUNCPAGE=$1 ;;

  -h|--help) HELP=1 ;;

  -s|--size) shift; size=$1 ;;

  -ph|--page-height) shift; PGHEIGHT=$1 ;;

  -pw|--page-width) shift; PGWIDTH=$1 ;;

  --crop) crop=1 ;;

  --deskew) DESKEW=1 ;;

  --unpaper) UNPAPER=1 ;;

  --searchable|--ocr) SEARCHABLE=1 ;;

  --language) shift; LANGUAGE=$1 ;;

  --skip-empty-pages) SKIP_EMPTY_PAGES=1 ;;

  -o|--output) shift; output="$1" ;;

  -l|--outputlist) shift; USEARRAY=1; output=(); output+=("$1") ;;

  -x|--device) shift; device=$1;;

  *) if [ $USEARRAY = 1 ]; then output+=("$1"); else echo >&2 "Unknown argument: $1"; exit 1; fi ;;

  esac
  shift   # next option
done

if [ $HELP -eq 1 ]; then
  echo "$(basename $0) [OPTIONS]... [output]"
  echo ""
  echo "OPTIONS"
  echo " -v, --verbose"
  echo "   Verbose output (this will slow down the scan due to the need to prevent interleaved output)"
  echo " -d, --duplex"
  echo "   Duplex scanning"
  echo " -m, --mode"
  echo "   Mode e.g. Lineart (default), Halftone, Gray, Color, etc."
  echo " -r, --resolution"
  echo "   Resolution e.g 300 (default)"
  echo " -a, --append"
  echo "   Append output to existing scan"
  echo " -e, --max <pages>"
  echo "   Max number of pages e.g. 2 (default is all pages)"
  echo " -t, --truncate <pages>"
  echo "   Truncate number of pages from end e.g. 1 (default is none)"
  echo " -s, --size"
  echo "   Page Size as type e.g. Letter (default), Legal, A4, no effect if --crop is specified"
  echo " -ph, --page-height"
  echo "   Custom Page Height in mm"
  echo " -pw, --page-width"
  echo "   Custom Page Width in mm"
  echo " -x, --device"
  echo "  Override scanner device name, defaulting to \"fujitsu\""
  echo " --crop"
  echo "   Crop to contents (driver must support this)"
  echo " --deskew"
  echo "   Run driver deskew (driver must support this)"
  echo " --unpaper"
  echo "   Run post-processing deskew and black edge detection (requires unpaper)"
  echo " --ocr"
  echo "   Run OCR to make the PDF searchable (requires tesseract)"
  echo " --language <lang>"
  echo "   which language to use for OCR"
  echo " --skip-empty-pages"
  echo "   remove empty pages from resulting PDF document (e.g. one sided doc in duplex mode)"
  echo ""
  echo "output"
  echo " -o, --output <outputfile>"
  echo "   Output to named file default=scan.pdf"
  echo " -l, --outputlist <outputfile-1...outputfile-n> Output to named files for each scanned page, can be used with append"
  echo ""
  exit 0
fi

if [ $USEARRAY = 0 -a -f "$output" -a ! $APPEND = 1 ]; then
  echo >&2 "Output file $output already exists. Delete or specify -a. Aborting."
  exit 1
fi

if [ $USEARRAY = 1 -a ! $APPEND = 1 ]; then
  for o in "${output[@]}"; do
    if [ -f "$o" ]; then
      echo >&2 "Output file $o already exists. Delete or specify -a. Aborting."
      exit 1
    fi
  done
fi

source=""
if [ $duplex -eq 1 ]; then
  source='Automatic Document Feeder(centrally aligned,Duplex)'

fi

if [ "$MAXPAGE" != "" ]; then
  MAXPAGE="-e $MAXPAGE"
fi

PS2PDF_OPTS=

# Specify non-letter sizes in mm
case "$size" in

  Letter) pgheightin=11; pgwidthin=8.5 ;;

  Legal) PGHEIGHT=355.6; PGWIDTH=215.9 ;;

  A4) PGHEIGHT=297; PGWIDTH=210 ;;

esac

if [ $crop != 1 -a "$PGHEIGHT" != "" ]; then
  pgheightin=$(units --compact -1 "$PGHEIGHT mm" 'in')
  PGHEIGHT="-y $PGHEIGHT"
  PS2PDF_OPTS="-dEPSCrop"
fi

if [ $crop != 1 -a "$PGWIDTH" != "" ]; then
  pgwidthin=$(units --compact -1 "$PGWIDTH mm" 'in')
  PGWIDTH="-x $PGWIDTH"
  PS2PDF_OPTS="-dEPSCrop"
fi

if [ $crop = 1 ]; then
  crop="--swcrop=yes"
  PGHEIGHT=
  PGWIDTH=
  pgheightin=
  pgwidthin=
  PS2PDF_OPTS="-dEPSCrop"
fi

if [ $DESKEW = 1 ]; then
  DESKEW="--swdeskew=yes"
fi

export VERBOSE
export UNPAPER
export SEARCHABLE
export LANGUAGE
export RESOLUTION
export pgwidthin
export pgheightin
export PS2PDF_OPTS
export SKIP_EMPTY_PAGES

if [ $VERBOSE = 1 ]; then
  LOCKFILE=$(mktemp)
  trap "rm -rf $LOCKFILE" 0
  export LOCKFILE
fi;

debug() { printf 'DEBUG: %s\n' "$*"; "$@"; }

echo >&2 "Scanning..."
args+=('-d' "$device" '--source' "$source" "$MAXPAGE" "$PGHEIGHT" "$PGWIDTH" '-S' "$SCRIPT" '--script-wait' '--resolution' "$RESOLUTION" "$DESKEW" "$crop" -o "$tmp_dir/scan-%04d")

debug scanadf "${args[@]}"

#debug scanadf -d "$device" $source $MAXPAGE $PGHEIGHT $PGWIDTH -S $SCRIPT --script-wait --resolution $RESOLUTION $DESKEW $crop -o $tmp_dir/scan-%04d



shopt -s extglob nullglob
pdffiles=($tmp_dir/scan-[0-9]*.pdf)
numscans=${#pdffiles[@]}
if [ $numscans -gt 0 ]; then
  echo "Processing $numscans pages"
  if [ $numscans -gt $TRUNCPAGE -a $TRUNCPAGE -gt 0 ]; then
    for x in ${pdffiles[@]:$numscans-$TRUNCPAGE:$TRUNCPAGE}; do rm "$x"; done;
    pdffiles=(${pdffiles[@]:0:$numscans-$TRUNCPAGE})
    echo "Truncated $TRUNCPAGE pages"
  fi
  if [ $numscans -gt 1 -a $USEARRAY = 1 ]; then
    echo "Naming pdfs based on output list..."
    output_count=${#output[@]}
    index=0
    while [ "$index" -lt "$output_count" ]; do
      let "scanno = $index + 1"
      if [ -f "${output[$index]}" ]; then
        mv "${output[$index]}" "${output[$index]}.orig"
        if [ $APPEND -eq 1 ]; then
          pdffiles=()
          if [ -f "${output[$index]}.orig" ]; then
            pdffiles+=("${output[$index]}.orig")
          fi
          pdffiles+=($tmp_dir/scan-*(0)$scanno.pdf)
          pdfunite "${pdffiles[@]}" "${output[$index]}" && rm $tmp_dir/scan-*(0)$scanno.pdf
        else
          mv $tmp_dir/scan-*(0)$scanno.pdf "${output[$index]}"
        fi
      else
        mv $tmp_dir/scan-*(0)$scanno.pdf "${output[$index]}"
      fi
      let "index = $index + 1"
    done
  elif [ $numscans -gt 1 -o $APPEND -eq 1 ]; then
    echo "Concatenating pdfs..."
    if [ -f "$output" ]; then
      mv "$output" "${output}.orig"
    fi
    pdffiles=()
    if [ -f "${output}.orig" ]; then
      pdffiles+=("${output}.orig")
    fi
    pdffiles+=($tmp_dir/scan-[0-9]*.pdf)
    pdfunite "${pdffiles[@]}" "$output" && rm $tmp_dir/scan-[0-9]*.pdf
  else
    if [ $USEARRAY = 1 ]; then
      mv $tmp_dir/scan-0*.pdf "${output[0]}"
    else
      mv $tmp_dir/scan-0*.pdf "$output"
    fi
  fi
  echo ""
  echo "Done."
else
  echo "Found no scans."
fi
