#!/bin/bash

debug() { printf 'DEBUG: %s\n' "$*"; "$@"; }

function error_exit {
  echo "$1" >&2   ## Send message to stderr. Exclude >&2 if you don't want it that way.
  exit "${2:-1}"  ## Return a code specified by $2 or 1 by default.
}

# declare an array to store arguments in
declare -a args

dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

device='fujitsu'
output="scan-$(date --iso-8601=seconds).pdf"
usearray=0
append=0
resolution=300
mode=Lineart
script="$dir/scan_perpage"
duplex=0
unpaper=0
searchable=0
language=eng
maxpage=
truncpage=0
help=0
size=A4
pgheight=
pgheightin=
pgwidth=1
pgwidthin=
crop=0
deskew=0
verbose=0
skip_empty_pages=0

# read in config file and overwrite defaults

if [[ -e "$dir/.sane-scan-pdf.conf" ]]; then source "$dir/.sane-scan-pdf.conf"
elif [[ -e /etc/sane-scan-pdf.conf ]]; then source /etc/sane-scan-pdf.conf
fi



i=0 tmp_dir=
trap '[[ $tmp_dir ]] && rm -rf "$tmp_dir"' EXIT

while ((++i <= 10)); do
  tmp_dir=${TMPdir:-$HOME}/$RANDOM-$$
  mkdir -m 700 "$tmp_dir" 2>/dev/null && break
done

if ((i > 10)); then
  error_exit 'Could not create temporary directory\n' 1
fi


# Parse command-line options
while [ $# -gt 0 ]; do
  case "$1" in

    -v|--verbose) verbose=1 ;;

    -d|--duplex) duplex=1 ;;

    -m|--mode) shift; mode=$1 ;;

    -r|--resolution) shift; resolution=$1 ;;

    -a|--append) append=1 ;;

    -e|--max) shift; maxpage=$1 ;;

    -t|--truncate) shift; truncpage=$1 ;;

    -h|--help) help=1 ;;

    -s|--size) shift; size=$1 ;;

    -ph|--page-height) shift; pgheight=$1 ;;

    -pw|--page-width) shift; pgwidth=$1 ;;

    --crop) crop=1 ;;

    --deskew) deskew=1 ;;

    --unpaper) unpaper=1 ;;

    --searchable|--ocr) searchable=1 ;;

    --language) shift; language=$1 ;;

    --mail) shift; mail=$1 ;;

    --from) shift; from=$1 ;;
    
    --skip-empty-pages) skip_empty_pages=1 ;;

    -o|--output) shift; output="$1" ;;

    -l|--outputlist) shift; usearray=1; output=(); output+=("$1") ;;

    -x|--device) shift; device=$1;;

    *) if [ $usearray = 1 ]; then output+=("$1"); else error_exit "Unknown argument: $1" 1; fi ;;

  esac
  shift   # next option
done

if [ $help -eq 1 ]; then
  echo "$(basename $0) [OPTIONS]... [output]"
  echo ""
  echo "OPTIONS"
  echo " -v, --verbose"
  echo "   Verbose output (this will slow down the scan due to the need to prevent interleaved output)"
  echo " -d, --duplex"
  echo "   Duplex scanning"
  echo " -m, --mode"
  echo "   Mode e.g. Lineart (default), Halftone, Gray, Color, etc."
  echo " -r, --resolution"
  echo "   Resolution e.g 300 (default)"
  echo " -a, --append"
  echo "   Append output to existing scan"
  echo " -e, --max <pages>"
  echo "   Max number of pages e.g. 2 (default is all pages)"
  echo " -t, --truncate <pages>"
  echo "   Truncate number of pages from end e.g. 1 (default is none)"
  echo " -s, --size"
  echo "   Page Size as type e.g. Letter (default), Legal, A4, no effect if --crop is specified"
  echo " -ph, --page-height"
  echo "   Custom Page Height in mm"
  echo " -pw, --page-width"
  echo "   Custom Page Width in mm"
  echo " -x, --device"
  echo "  Override scanner device name, defaulting to \"fujitsu\""
  echo " --crop"
  echo "   Crop to contents (driver must support this)"
  echo " --deskew"
  echo "   Run driver deskew (driver must support this)"
  echo " --unpaper"
  echo "   Run post-processing deskew and black edge detection (requires unpaper)"
  echo " --ocr"
  echo "   Run OCR to make the PDF searchable (requires tesseract)"
  echo " --language <lang>"
  echo "   Which language to use for OCR"
  echo " --skip-empty-pages"
  echo "   Remove empty pages from resulting PDF document (e.g. one sided doc in duplex mode)"
  echo " --mail <email-address>"
  echo "   Mail PDF to recipient"
  echo " --from <email-address>"
  echo "   From address to use if pdf to be mailed"
  echo ""
  echo "output"
  echo " -o, --output <outputfile>"
  echo "   Output to named file default=scan.pdf"
  echo " -l, --outputlist <outputfile-1...outputfile-n> Output to named files for each scanned page, can be used with append"
  echo ""
  exit 0
fi

if [ $usearray = 0 -a -f "$output" -a ! $append = 1 ]; then
  error_exit "Output file $output already exists. Delete or specify -a. Aborting." 1
fi

if [ $usearray = 1 -a ! $append = 1 ]; then
  for o in "${output[@]}"; do
    if [ -f "$o" ]; then
      error_exit "Output file $o already exists. Delete or specify -a. Aborting." 1
    fi
  done
fi

source=""
if [ $duplex -eq 1 ]; then
  source='Automatic Document Feeder(centrally aligned,Duplex)'

fi

if [ "$maxpage" != "" ]; then
  maxpage="-e $maxpage"
fi

ps2pdf_opts=

# Specify non-letter sizes in mm
case "$size" in

  Letter) pgheightin=11; pgwidthin=8.5 ;;

  Legal) pgheight=355.6; pgwidth=215.9 ;;

  A4) pgheight=297; pgwidth=210 ;;

esac

if [ $crop != 1 -a "$pgheight" != "" ]; then
  pgheightin=$(units --compact -1 "$pgheight mm" 'in')
  pgheight="-y $pgheight"
  ps2pdf_opts="-dEPSCrop"
fi

if [ $crop != 1 -a "$pgwidth" != "" ]; then
  pgwidthin=$(units --compact -1 "$pgwidth mm" 'in')
  pgwidth="-x $pgwidth"
  ps2pdf_opts="-dEPSCrop"
fi

if [ $crop = 1 ]; then
  crop="--swcrop=yes"
  pgheight=
  pgwidth=
  pgheightin=
  pgwidthin=
  ps2pdf_opts="-dEPSCrop"
fi

if [ $deskew = 1 ]; then
  deskew="--swdeskew=yes"
fi

export verbose
export unpaper
export searchable
export language
export resolution
export pgwidthin
export pgheightin
export ps2pdf_opts
export skip_empty_pages

if [ $verbose = 1 ]; then
  lockfile=$(mktemp)
  trap "rm -rf $lockfile" 0
  export lockfile
fi;

# email a file given the filename and recipient address
# requires mail from mailutils
mail_document()
{
  # check correct number of parameters passed in
  if [[ $# -ne 2 ]] ; then
    error_exit "Error: must supply filename and email address" 1
  fi
  # declare an array to store mail arguments in
  declare -a mailargs
  # check if a $from address is declared and use it. otherwise rely on user's configuration for from address
  if [[ ! -z ${from+x} ]] ; then
    echo got from address "$from"
    mailargs+=("-aFrom:$from")
  fi
  echo "emailing document $output to $mail"
  mailargs+=('-s' "scanned document from $HOSTNAME " "$mail" '-A' "$output" )
  echo '' | debug mail "${mailargs[@]}"
}

echo >&2 "Scanning..."
args+=('-d' "$device")


if [[ ! -z "$source" ]] ; then
  args+=('--source' "$source")
fi
  
args+=("$maxpage" "$pgheight" "$pgwidth" '-S' "$script" '--script-wait' '--resolution' "$resolution" "$deskew" "$crop" -o "$tmp_dir/scan-%04d")

debug scanadf "${args[@]}"

#debug scanadf -d "$device" $source $maxpage $pgheight $pgwidth -S $script --script-wait --resolution $resolution $deskew $crop -o $tmp_dir/scan-%04d



shopt -s extglob nullglob
pdffiles=($tmp_dir/scan-[0-9]*.pdf)
numscans=${#pdffiles[@]}
if [ $numscans -gt 0 ]; then
  echo "Processing $numscans pages"
  if [ $numscans -gt $truncpage -a $truncpage -gt 0 ]; then
    for x in ${pdffiles[@]:$numscans-$truncpage:$truncpage}; do rm "$x"; done;
    pdffiles=(${pdffiles[@]:0:$numscans-$truncpage})
    echo "Truncated $truncpage pages"
  fi
  if [ $numscans -gt 1 -a $usearray = 1 ]; then
    echo "Naming pdfs based on output list..."
    output_count=${#output[@]}
    index=0
    while [ "$index" -lt "$output_count" ]; do
      let "scanno = $index + 1"
      if [ -f "${output[$index]}" ]; then
        mv "${output[$index]}" "${output[$index]}.orig"
        if [ $append -eq 1 ]; then
          pdffiles=()
          if [ -f "${output[$index]}.orig" ]; then
            pdffiles+=("${output[$index]}.orig")
          fi
          pdffiles+=($tmp_dir/scan-*(0)$scanno.pdf)
          pdfunite "${pdffiles[@]}" "${output[$index]}" && rm $tmp_dir/scan-*(0)$scanno.pdf
        else
          mv $tmp_dir/scan-*(0)$scanno.pdf "${output[$index]}"
        fi
      else
        mv $tmp_dir/scan-*(0)$scanno.pdf "${output[$index]}"
      fi
      let "index = $index + 1"
    done
  elif [ $numscans -gt 1 -o $append -eq 1 ]; then
    echo "Concatenating pdfs..."
    if [ -f "$output" ]; then
      mv "$output" "${output}.orig"
    fi
    pdffiles=()
    if [ -f "${output}.orig" ]; then
      pdffiles+=("${output}.orig")
    fi
    pdffiles+=($tmp_dir/scan-[0-9]*.pdf)
    pdfunite "${pdffiles[@]}" "$output" && rm $tmp_dir/scan-[0-9]*.pdf
  else
    if [ $usearray = 1 ]; then
      mv $tmp_dir/scan-0*.pdf "${output[0]}"
    else
      mv $tmp_dir/scan-0*.pdf "$output"
    fi
  fi
  echo ""
  # mail the document if $mail is set
  if ! [[ -z ${mail+x} ]] ; then
    mail_document "$output" "$mail"
  fi
  echo "Done."
else
  echo "Found no scans."
fi
